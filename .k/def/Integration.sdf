module Integration

imports Common
imports KTechnique
imports KBuiltinsBasic

imports Variables

exports

context-free syntax
context-free priorities
{
	"notBool" Bool -> Bool {left, cons("Bool10Syn")}
} > {
	Bool "andBool" Bool -> Bool {left, cons("Bool12Syn")}
	Bool "andThenBool" Bool -> Bool {left, cons("Bool13Syn")}
} > {
	Bool "xorBool" Bool -> Bool {left, cons("Bool14Syn")}
} > {
	Bool "orBool" Bool -> Bool {left, cons("Bool15Syn")}
	Bool "orElseBool" Bool -> Bool {left, cons("Bool16Syn")}
} > {
	Bool "impliesBool" Bool -> Bool {left, cons("Bool17Syn")}
} > { left:
	Bool "==Bool" Bool -> Bool {left, cons("Bool18Syn")}
	Bool "=/=Bool" Bool -> Bool {left, cons("Bool19Syn")}
}

context-free priorities
{ left:
	K "==K" K -> Bool {cons("Bool120Syn")}
	K "=/=K" K -> Bool {cons("Bool122Syn")}
}

context-free priorities
{
	K "==K" K -> Bool {cons("Bool120Syn")}
	K "=/=K" K -> Bool {cons("Bool122Syn")}
} > {
	"notBool" Bool -> Bool {left, cons("Bool10Syn")}
	Bool "impliesBool" Bool -> Bool {left, cons("Bool17Syn")}
	Bool "andThenBool" Bool -> Bool {left, cons("Bool13Syn")}
	Bool "orBool" Bool -> Bool {left, cons("Bool15Syn")}
	Bool "xorBool" Bool -> Bool {left, cons("Bool14Syn")}
	Bool "orElseBool" Bool -> Bool {left, cons("Bool16Syn")}
	Bool "andBool" Bool -> Bool {left, cons("Bool12Syn")}
}

context-free priorities
{ right:
	"~Int" Int -> Int {right, cons("Int147Syn")}
} > { left:
	Int "^Int" Int -> Int {left, cons("Int148Syn")}
} > { left:
	Int "*Int" Int -> Int {left, cons("Int149Syn")}
	Int "/Int" Int -> Int {left, cons("Int150Syn")}
	Int "%Int" Int -> Int {left, cons("Int152Syn")}
	Int "divInt" Int -> Int {left, cons("Int153Syn")}
	Int "modInt" Int -> Int {left, cons("Int154Syn")}
} > { left:
	Int "+Int" Int -> Int {left, cons("Int1PlusSyn")}
	Int "-Int" Int -> Int {left, cons("Int155Syn")}
} > { left:
	Int ">>Int" Int -> Int {left, cons("Int156Syn")}
	Int "<<Int" Int -> Int {left, cons("Int157Syn")}
} > { left:
	Int "&Int" Int -> Int {left, cons("Int158Syn")}
} > { left:
	Int "xorInt" Int -> Int {left, cons("Int159Syn")}
} > { left:
	Int "|Int" Int -> Int {left, cons("Int160Syn")}
}

context-free priorities
{
	"--Float" Float -> Float {cons("Float174Syn")}
} > {
	Float "^Float" Float -> Float {left, cons("Float175Syn")}
} > { left:
	Float "*Float" Float -> Float {left, cons("Float176Syn")}
	Float "/Float" Float -> Float {left, cons("Float177Syn")}
	Float "%Float" Float -> Float {left, cons("Float178Syn")}
} > { left:
	Float "+Float" Float -> Float {left, cons("Float179Syn")}
	Float "-Float" Float -> Float {left, cons("Float180Syn")}
}

context-free priorities
{ left:
	Float "<=Float" Float -> Bool {left, cons("Bool182Syn")}
	Float "<Float" Float -> Bool {left, cons("Bool183Syn")}
	Float ">=Float" Float -> Bool {left, cons("Bool184Syn")}
	Float ">Float" Float -> Bool {left, cons("Bool185Syn")}
	Float "==Float" Float -> Bool {left, cons("Bool186Syn")}
	Float "=/=Float" Float -> Bool {left, cons("Bool187Syn")}
	Float "<=Float" InsertDzFloat "<=Float" Float -> Bool {cons("Bool188Syn")}
}

context-free priorities
{
	K "|->" K -> MyMap {cons("MyMap1420Syn")}
} > {
	MyMap "," MyMap -> MyMap {left, cons("MyMap1408Syn")}
}

context-free priorities
{
	Block -> Stmt {}
	Id "=" InsertDzAExp ";" -> Stmt {cons("Stmt1452Syn")}
	"does" InsertDzBExp InsertDzBlock "if_not" Block -> Stmt {cons("Stmt1453Syn")}
	"dont_stop_if" "(" InsertDzBExp ")" Block -> Stmt {cons("Stmt1455Syn")}
	"function" "(" ")" Block -> Stmt {cons("Stmt1456Syn")}
	"function" InsertDzId "(" ")" Block -> Stmt {cons("Stmt1457Syn")}
} > {
	Stmt Stmt -> Stmt {left, cons("Stmt1458Syn")}
}

%% subsorts 1
context-free priorities
{
	Bool -> K
	TCPError -> K
	DzFloat -> K
	TCPAnswer -> K
	DzString -> K
	DzInt -> K
	BExp -> K
	MySet -> K
	MyMap -> K
	Ids -> K
	Int -> K
	DzBool -> K
	Block -> K
	Float -> K
	Nat -> K
	Variable -> K
	AExps -> K
	Char -> K
	MyBag -> K
	AExp -> K
	String -> K
	Stream -> K
	Stmt -> K
	MyList -> K
	Id -> K
} .> {
	AExp -> AExps
	String -> TCPAnswer
	Int -> AExp
	Bool -> BExp
	DzFloat -> Float
	Block -> Stmt
	TCPError -> TCPAnswer
	DzString -> String
	DzInt -> Int
	Id -> Ids
	DzBool -> Bool
	Id -> AExp
	Ids -> AExps
} .> {
	K -> Bool
	K -> TCPError
	K -> DzFloat
	K -> TCPAnswer
	K -> DzString
	K -> DzInt
	K -> BExp
	K -> MySet
	K -> MyMap
	K -> Ids
	K -> Int
	K -> DzBool
	K -> Block
	K -> Float
	K -> Nat
	K -> Variable
	K -> AExps
	K -> Char
	K -> MyBag
	K -> AExp
	K -> String
	K -> Stream
	K -> Stmt
	K -> MyList
	K -> Id
}

%% subsorts 1a
context-free priorities
{
	Bool -> K
	TCPError -> K
	DzFloat -> K
	TCPAnswer -> K
	DzString -> K
	DzInt -> K
	BExp -> K
	MySet -> K
	MyMap -> K
	Ids -> K
	Int -> K
	DzBool -> K
	Block -> K
	Float -> K
	Nat -> K
	Variable -> K
	AExps -> K
	Char -> K
	MyBag -> K
	AExp -> K
	String -> K
	Stream -> K
	Stmt -> K
	MyList -> K
	Id -> K
} .> {
	K -> Bool
	K -> TCPError
	K -> DzFloat
	K -> TCPAnswer
	K -> DzString
	K -> DzInt
	K -> BExp
	K -> MySet
	K -> MyMap
	K -> Ids
	K -> Int
	K -> DzBool
	K -> Block
	K -> Float
	K -> Nat
	K -> Variable
	K -> AExps
	K -> Char
	K -> MyBag
	K -> AExp
	K -> String
	K -> Stream
	K -> Stmt
	K -> MyList
	K -> Id
}

%% subsorts 2
context-free priorities
{
	K -> Bool
	K -> TCPError
	K -> DzFloat
	K -> TCPAnswer
	K -> DzString
	K -> DzInt
	K -> BExp
	K -> MySet
	K -> MyMap
	K -> Ids
	K -> Int
	K -> DzBool
	K -> Block
	K -> Float
	K -> Nat
	K -> Variable
	K -> AExps
	K -> Char
	K -> MyBag
	K -> AExp
	K -> String
	K -> Stream
	K -> Stmt
	K -> MyList
	K -> Id
} .> {
	Bool -> K
	TCPError -> K
	DzFloat -> K
	TCPAnswer -> K
	DzString -> K
	DzInt -> K
	BExp -> K
	MySet -> K
	MyMap -> K
	Ids -> K
	Int -> K
	DzBool -> K
	Block -> K
	Float -> K
	Nat -> K
	Variable -> K
	AExps -> K
	Char -> K
	MyBag -> K
	AExp -> K
	String -> K
	Stream -> K
	Stmt -> K
	MyList -> K
	Id -> K
}
context-free syntax
	"#parse" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1379Syn")}
	"#" K -> KLabel {cons("KLabel1296Syn")}
	"#string2Int" "(" InsertDzK ")" -> K {cons("K1386Syn")}
	Map "=/=Map" Map -> Bool {cons("Bool130Syn")}
	K "inVars" K -> Bool {cons("Bool1322Syn")}
	"String2Int" "(" InsertDzString ")" -> Int {cons("Int1205Syn")}
	Int "=/=Int" Int -> Bool {left, cons("Bool170Syn")}
	String ">String" String -> Bool {cons("Bool1229Syn")}
	"MyMapOf" "(" InsertDzKList "," InsertDzKList ")" -> MyMap {cons("MyMap1422Syn")}
	"#putc" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1373Syn")}
	"#isTCPError" "(" InsertDzString ")" -> Bool {cons("Bool1258Syn")}
	"lengthString" "(" InsertDzString ")" -> Int {cons("Int194Syn")}
	"getVariables" "(" InsertDzK ")" -> Set {cons("Set1302Syn")}
	"#stdout" -> Int {cons("Int1384Syn")}
	"size" "(" InsertDzMyMap ")" -> Int {cons("Int1429Syn")}
	"isVariable" "(" InsertDzMap ")" -> Bool {cons("Bool1352Syn")}
	String "==String" String -> Bool {left, cons("Bool193Syn")}
	"#splitedBinder" "(" InsertDzKList "," InsertDzKList "," InsertDzSet ")" -> K {cons("K1320Syn")}
	"Set2KTerm" "(" InsertDzSet ")" -> K {cons("K1284Syn")}
	AExp ">=" AExp -> BExp {cons("BExp1445Syn")}
	"#tell" "(" InsertDzInt ")" -> KItem {cons("KItem1367Syn")}
	"#if" InsertDzBool "#then" InsertDzK "#else" InsertDzK "#fi" -> K {cons("K123Syn")}
	"isVariable" "(" InsertDzBag ")" -> Bool {cons("Bool1350Syn")}
	"#write" "(" InsertDzInt "," InsertDzString ")" -> K {cons("K1374Syn")}
	KLabel "=KLabel" KLabel -> Bool {cons("Bool146Syn")}
	"#freeVars" "(" InsertDzKList "," InsertDzSet "," InsertDzSet ")" -> K {cons("K1333Syn")}
	"Set2KLabel" Set -> KLabel {cons("KLabel1292Syn")}
	"##tcpRequest" "(" InsertDzString ")" -> String {cons("String1256Syn")}
	"#tcpRequest" "(" InsertDzString ")" -> TCPAnswer {cons("TCPAnswer1254Syn")}
	Map "=Map" Map -> Bool {cons("Bool144Syn")}
	"#boundVars1" "(" InsertDzK ")" -> K {cons("K1324Syn")}
	MyMap "[" InsertDzK "]" -> K {cons("K1423Syn")}
	"#buffer" "(" InsertDzK ")" -> Stream {cons("Stream1IOBufferSyn")}
	"MySetItem" "(" InsertDzK ")" -> MySet {cons("MySet1403Syn")}
	"vars" "(" InsertDzSet ")" -> K {cons("K1299Syn")}
	Int "==Int" Int -> Bool {left, cons("Bool169Syn")}
	"#string2klist" "(" InsertDzString ")" -> KList {cons("KList1387Syn")}
	"#EINVAL" -> TCPError {cons("TCPError1253Syn")}
	"#binderSplit2" "(" InsertDzKLabel "," InsertDzInt "," InsertDzKList "," InsertDzKList "," InsertDzKList "," InsertDzSet "," InsertDzK ")" -> K {cons("K1327Syn")}
	"exists" InsertDzSet "." Bool -> Bool {cons("Bool1339Syn")}
	".MyMap" -> MyMap {cons("MyMap1409Syn")}
	DzBool -> Bool {}
	"minInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int162Syn")}
	"Int2String" "(" InsertDzInt ")" -> String {cons("String1206Syn")}
	"KList2KLabel" KList -> KLabel {cons("KLabel1289Syn")}
	".MyBag" -> MyBag {cons("MyBag1396Syn")}
	"#eval" Map -> Bag {cons("Bag1EvalSyn")}
	"#isMapInK" "(" InsertDzK ")" -> Bool {cons("Bool1275Syn")}
	"Map" "(" InsertDzKList "|->" InsertDzKList ")" -> Map {cons("Map1267Syn")}
	MyMap "[" InsertDzK "<-" "undef" "]" -> MyMap {cons("MyMap1426Syn")}
	"#freshSym" "(" InsertDzK ")" -> K {cons("K1364Syn")}
	"#open" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1366Syn")}
	"isBuiltin" "(" InsertDzK ")" -> Bool {cons("Bool1347Syn")}
	"SMTCall" "(" InsertDzString ")" -> String {cons("String1345Syn")}
	"rfindString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int199Syn")}
	Int ">=Int" Int -> Bool {left, cons("Bool167Syn")}
	AExp "<=" AExp -> BExp {cons("BExp1444Syn")}
	"checkSat" "(" InsertDzBool ")" -> String {cons("String1346Syn")}
	KLabel "==KLabel" KLabel -> Bool {cons("Bool135Syn")}
	"MyBagItem" "(" InsertDzK ")" -> MyBag {cons("MyBag1397Syn")}
	"isBound" "(" InsertDzKLabel "," InsertDzInt ")" -> Bool {cons("Bool1308Syn")}
	Int "<=Int" Int -> Bool {left, cons("Bool165Syn")}
	"size" "(" InsertDzMySet ")" -> Int {cons("Int1407Syn")}
	"#tcpError" "(" InsertDzString ")" -> TCPError {cons("TCPError1242Syn")}
	"K2SMTLib" "(" InsertDzK ")" -> String {cons("String1340Syn")}
	List "=/=List" List -> Bool {cons("Bool138Syn")}
	"lengthList" List -> Int {cons("Int1286Syn")}
	"{" InsertDzStmt "}" -> Block {cons("Block1450Syn")}
	K "in" Set -> Bool {cons("Bool1278Syn")}
	"isEmptySet" "(" InsertDzSet ")" -> Bool {cons("Bool1283Syn")}
	BExp "and" BExp -> BExp {left, cons("BExp1448Syn")}
	Int "<Int" Int -> Bool {left, cons("Bool166Syn")}
	K "in" MyBag -> Bool {cons("Bool1398Syn")}
	"#parseToken" "(" InsertDzString "," InsertDzString ")" -> K {cons("K1236Syn")}
	DzFloat -> Float {}
	Map "(" InsertDzK ")" -> K {cons("K1265Syn")}
	"String2Bool" "(" InsertDzTCPAnswer ")" -> Bool {cons("Bool1382Syn")}
	"#ioError" "(" InsertDzString ")" -> K {cons("K1375Syn")}
	"#freshSymSort" "(" InsertDzString ")" -> K {cons("K1362Syn")}
	"String2DotK" "(" InsertDzTCPAnswer ")" -> K {cons("K1380Syn")}
	"#isWhiteSpace" "(" InsertDzString ")" -> Bool {cons("Bool1234Syn")}
	"isSymbolicList" "(" InsertDzList ")" -> K {cons("K1355Syn")}
	Int -> AExp {}
	MyMap "," MyMap -> MyMap {left, cons("MyMap1408Syn")}
	"#ESPIPE" -> TCPError {cons("TCPError1250Syn")}
	"String2K" "(" InsertDzString ")" -> K {cons("K1390Syn")}
	List "==List" List -> Bool {cons("Bool137Syn")}
	Set "=Set" Set -> Bool {cons("Bool142Syn")}
	K "=K" K -> Bool {cons("Bool139Syn")}
	"#freeVarsBinder1" "(" InsertDzK "," InsertDzSet ")" -> K {cons("K1336Syn")}
	Set "=/=Set" Set -> Bool {cons("Bool127Syn")}
	"fresh" "(" InsertDzK ")" -> Bool {cons("Bool1FreshSyn")}
	"absInt" "(" InsertDzInt ")" -> Int {cons("Int164Syn")}
	"#noparse" -> TCPError {cons("TCPError1243Syn")}
	"#getVars1" "(" InsertDzKList "," InsertDzSet ")" -> K {cons("K1304Syn")}
	"#if" InsertDzBool "#then" InsertDzInt "#else" InsertDzInt "#fi" -> Int {cons("Int124Syn")}
	K "#inKList" KList -> Bool {cons("Bool1264Syn")}
	List "=List" List -> Bool {cons("Bool140Syn")}
	Map "==Map" Map -> Bool {cons("Bool129Syn")}
	KList "=/=KList" KList -> Bool {cons("Bool134Syn")}
	"#EISDIR" -> TCPError {cons("TCPError1252Syn")}
	"keys" Map -> Set {cons("Set1269Syn")}
	"findChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1200Syn")}
	"#freshSymN" "(" InsertDzK "," InsertDzInt ")" -> K {cons("K1363Syn")}
	"directionalityChar" "(" InsertDzString ")" -> String {cons("String1233Syn")}
	"#ELOOP" -> TCPError {cons("TCPError1247Syn")}
	"#evalHelper" Map -> Bag {cons("Bag1EvalHelperSyn")}
	"Vars2SMTLib" "(" InsertDzSet ")" -> String {cons("String1342Syn")}
	"!" BExp -> BExp {cons("BExp1446Syn")}
	"intersectSet" "(" InsertDzSet "," InsertDzSet ")" -> Set {cons("Set1282Syn")}
	"#freshVar" "(" InsertDzK "," InsertDzSet ")" -> K {cons("K1305Syn")}
	"#ENOENT" -> TCPError {cons("TCPError1244Syn")}
	"isLocalFreshVar" "(" InsertDzK ")" -> Bool {cons("Bool1307Syn")}
	"K2Sort" "(" InsertDzK ")" -> String {cons("String1354Syn")}
	"Int2Float" "(" InsertDzInt ")" -> Float {cons("Float189Syn")}
	".MySet" -> MySet {cons("MySet1402Syn")}
	"isVariable" "(" InsertDzSet ")" -> Bool {cons("Bool1349Syn")}
	"isKLabelConstant" "(" InsertDzKLabel ")" -> Bool {cons("Bool1353Syn")}
	"MyListItem" "(" InsertDzK ")" -> MyList {cons("MyList1433Syn")}
	MyMap "[" InsertDzK "<-" InsertDzK "]" -> MyMap {cons("MyMap1424Syn")}
	"chrChar" "(" InsertDzInt ")" -> String {cons("String195Syn")}
	"String2KLabel" "(" InsertDzString ")" -> KLabel {cons("KLabel1String2KLabelSyn")}
	"#freeVarsBinder2" "(" InsertDzK "," InsertDzK ")" -> K {cons("K1337Syn")}
	"#stderr" -> Int {cons("Int1385Syn")}
	"#getVarsFromK" "(" InsertDzK ")" -> Set {cons("Set1300Syn")}
	"#getSymLabel" "(" InsertDzString ")" -> K {cons("K1359Syn")}
	"String2Id" "(" InsertDzString ")" -> Id {cons("Id1239Syn")}
	Set "==Set" Set -> Bool {cons("Bool126Syn")}
	MySet "-MySet" MySet -> MySet {cons("MySet1404Syn")}
	"Float2String" "(" InsertDzFloat ")" -> String {cons("String1203Syn")}
	"Map2KLabel" Map -> KLabel {cons("KLabel1294Syn")}
	"#EOF" -> TCPError {cons("TCPError1240Syn")}
	Bag "=Bag" Bag -> Bool {cons("Bool143Syn")}
	"#EACCES" -> TCPError {cons("TCPError1246Syn")}
	"Consts2SMTLib" "(" InsertDzSet ")" -> String {cons("String1343Syn")}
	"#parseInput" "(" InsertDzString "," InsertDzString ")" -> Stream {cons("Stream1ParseSyn")}
	AExp "<" AExp -> BExp {cons("BExp1442Syn")}
	"Set2KTermAcc" "(" InsertDzSet "," InsertDzK ")" -> K {cons("K1285Syn")}
	"isSymbolicBag" "(" InsertDzBag ")" -> K {cons("K1357Syn")}
	Map "[" "undef" "/" InsertDzKList "]" -> Map {cons("Map1266Syn")}
	MyBag "," MyBag -> MyBag {cons("MyBag1395Syn")}
	AExp ">" AExp -> BExp {cons("BExp1443Syn")}
	String "+String" String -> String {left, cons("String192Syn")}
	"Bag2KLabel" Bag -> KLabel {cons("KLabel1290Syn")}
	"#boundVars" "(" InsertDzK ")" -> K {cons("K1323Syn")}
	K "in" MyList -> Bool {cons("Bool1434Syn")}
	Int ">Int" Int -> Bool {left, cons("Bool168Syn")}
	"#lstat" "(" InsertDzString ")" -> KList {cons("KList1377Syn")}
	"#statTypes" "(" InsertDzKList ")" -> KList {cons("KList1388Syn")}
	"#EBADF" -> TCPError {cons("TCPError1249Syn")}
	"#getc" "(" InsertDzInt ")" -> KItem {cons("KItem1368Syn")}
	"#freeVarsBinder" "(" InsertDzK "," InsertDzSet ")" -> K {cons("K1335Syn")}
	K "|->" K -> MyMap {cons("MyMap1420Syn")}
	DzString -> String {}
	"K2String" "(" InsertDzK ")" -> String {cons("String1393Syn")}
	"isSymbolicSet" "(" InsertDzSet ")" -> K {cons("K1356Syn")}
	"#binderSplit1" "(" InsertDzKLabel "," InsertDzInt "," InsertDzKList "," InsertDzKList "," InsertDzKList "," InsertDzSet ")" -> K {cons("K1326Syn")}
	"SMTLibQuery" "(" InsertDzBool ")" -> String {cons("String1344Syn")}
	"isVariable" "(" InsertDzList ")" -> Bool {cons("Bool1348Syn")}
	"#open" "(" InsertDzString ")" -> KItem {cons("KItem1365Syn")}
	"#counter" -> Int {cons("Int1262Syn")}
	"List2KLabel" List -> KLabel {cons("KLabel1293Syn")}
	"#hasMapping" "(" InsertDzMap "," InsertDzK ")" -> Bool {cons("Bool1273Syn")}
	"CellLabel2KLabel" CellLabel -> KLabel {cons("KLabel1288Syn")}
	"isToken" "(" InsertDzK ")" -> K {cons("K1298Syn")}
	MySet "," MySet -> MySet {left, cons("MySet1400Syn")}
	Map "<=Map" Map -> Bool {cons("Bool128Syn")}
	"rfindChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1202Syn")}
	"#freezer" K -> KLabel {cons("KLabel1297Syn")}
	"{" "}" -> Block {cons("Block1449Syn")}
	"#seek" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1372Syn")}
	"isBounding" "(" InsertDzKLabel "," InsertDzInt ")" -> Bool {cons("Bool1309Syn")}
	"size" "(" InsertDzMyBag ")" -> Int {cons("Int1399Syn")}
	"forall" InsertDzSet "." Bool -> Bool {cons("Bool1338Syn")}
	"getKLabel" K -> KLabel {cons("KLabel1295Syn")}
	"substrString" "(" InsertDzString "," InsertDzInt "," InsertDzInt ")" -> String {cons("String197Syn")}
	Set "<=Set" Set -> Bool {cons("Bool125Syn")}
	"Float2Int" "(" InsertDzFloat ")" -> Int {cons("Int190Syn")}
	"values" "(" InsertDzMyMap ")" -> MyBag {cons("MyBag1428Syn")}
	"maxInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int163Syn")}
	"Bag2String" "(" InsertDzBag ")" -> String {cons("String1394Syn")}
	"#ostream" "(" InsertDzInt ")" -> Stream {cons("Stream1OutputStreamSyn")}
	Set "-Set" Set -> Set {cons("Set1277Syn")}
	"categoryChar" "(" InsertDzString ")" -> String {cons("String1232Syn")}
	"int" InsertDzIds ";" -> Stmt {cons("Stmt1454Syn")}
	DzInt -> Int {}
	"#getVars" "(" InsertDzK ")" -> K {cons("K1303Syn")}
	AExp InsertDzAExp "-" -> AExp {left, cons("AExp1438Syn")}
	Int "dividesInt" Int -> Bool {cons("Bool173Syn")}
	"intersectSet" "(" InsertDzMySet "," InsertDzMySet ")" -> MySet {cons("MySet1405Syn")}
	"freeVariables" "(" InsertDzKList ")" -> Set {cons("Set1328Syn")}
	AExp InsertDzAExp "/" -> AExp {left, cons("AExp1436Syn")}
	"#ENOTDIR" -> TCPError {cons("TCPError1245Syn")}
	MyList "," MyList -> MyList {left, cons("MyList1430Syn")}
	String "=/=String" String -> Bool {left, cons("Bool1226Syn")}
	K "in" MySet -> Bool {cons("Bool1406Syn")}
	"#retrieveTCPError" "(" InsertDzString ")" -> String {cons("String1257Syn")}
	"#read" "(" InsertDzInt "," InsertDzInt ")" -> KItem {cons("KItem1369Syn")}
	AExp "," AExps -> AExps {cons("AExps1ListSyn")}
	".AExps" -> AExps {cons("AExps1Empty")}
	"#checkTCPAnswer" "(" InsertDzString ")" -> TCPAnswer {cons("TCPAnswer1255Syn")}
	"size" "(" InsertDzMyList ")" -> Int {cons("Int1435Syn")}
	"#distinctCounter" "(" InsertDzInt ")" -> Int {cons("Int1260Syn")}
	"Id2String" "(" InsertDzId ")" -> String {cons("String1238Syn")}
	AExp InsertDzAExp "%" -> AExp {left, cons("AExp1440Syn")}
	AExp InsertDzAExp "+" -> AExp {left, cons("AExp1437Syn")}
	AExp InsertDzAExp "*" -> AExp {left, cons("AExp1439Syn")}
	String -> TCPAnswer {}
	String "<String" String -> Bool {cons("Bool1227Syn")}
	"#freshSymSortN" "(" InsertDzString "," InsertDzInt ")" -> K {cons("K1360Syn")}
	"#isDigit" "(" InsertDzString ")" -> Bool {cons("Bool1235Syn")}
	"#freeVars" "(" InsertDzKList ")" -> K {cons("K1332Syn")}
	"keys" "(" InsertDzMyMap ")" -> MySet {cons("MySet1427Syn")}
	"ltrim" "(" InsertDzString ")" -> String {cons("String1224Syn")}
	"#freeVars1" "(" InsertDzKList "," InsertDzK "," InsertDzSet "," InsertDzSet ")" -> K {cons("K1334Syn")}
	Id -> AExp {}
	String "<=String" String -> Bool {cons("Bool1228Syn")}
	"countAllOccurences" "(" InsertDzString "," InsertDzString ")" -> Int {cons("Int1222Syn")}
	KList "=KList" KList -> Bool {cons("Bool145Syn")}
	"dummy" "(" InsertDzKList ")" -> K {cons("K133Syn")}
	"#istream" "(" InsertDzInt ")" -> Stream {cons("Stream1InputStreamSyn")}
	"#tokenToString" "(" InsertDzK ")" -> String {cons("String1237Syn")}
	"replaceFirst" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1220Syn")}
	String ">=String" String -> Bool {cons("Bool1230Syn")}
	KLabel "=/=KLabel" KLabel -> Bool {cons("Bool136Syn")}
	"trim" "(" InsertDzString ")" -> String {cons("String1223Syn")}
	"ordChar" "(" InsertDzString ")" -> Int {cons("Int196Syn")}
	"randomRandom" "(" InsertDzInt ")" -> Int {cons("Int1259Syn")}
	"#getMapFromK" "(" InsertDzK ")" -> Map {cons("Map1276Syn")}
	"KLabel2KLabel" KLabel -> KLabel {cons("KLabel1287Syn")}
	"#map" "(" InsertDzMap ")" -> K {cons("K1274Syn")}
	"freeVariables" "(" InsertDzSet ")" -> Set {cons("Set1329Syn")}
	"#freeVarsSet" "(" InsertDzSet ")" -> K {cons("K1330Syn")}
	"String2Float" "(" InsertDzString ")" -> Float {cons("Float1204Syn")}
	"#close" "(" InsertDzInt ")" -> K {cons("K1370Syn")}
	Map "[" InsertDzMap "]" -> Map {cons("Map1UpdateMapWithMapSyn")}
	Bool -> BExp {}
	AExp "eq" AExp -> BExp {cons("BExp1447Syn")}
	"update" "(" InsertDzMyMap "," InsertDzMyMap ")" -> MyMap {cons("MyMap1425Syn")}
	TCPError -> TCPAnswer {}
	"#stat" "(" InsertDzString ")" -> KList {cons("KList1376Syn")}
	Int "=Int" Int -> Bool {cons("Bool172Syn")}
	SetItem "in" Set -> Bool {cons("Bool1279Syn")}
	"#freshVar1" "(" InsertDzSet "," InsertDzK ")" -> K {cons("K1306Syn")}
	".MyList" -> MyList {cons("MyList1432Syn")}
	"#opendir" "(" InsertDzString ")" -> KList {cons("KList1378Syn")}
	Map "[" InsertDzKList "/" InsertDzKList "]" -> Map {cons("Map1268Syn")}
	KResult -> K {}
	"values" Map -> Set {cons("Set1270Syn")}
	Id "," Ids -> Ids {cons("Ids1ListSyn")}
	".Ids" -> Ids {cons("Ids1Empty")}
	"#noIO" -> Stream {cons("Stream1389Syn")}
	"replace" "(" InsertDzString "," InsertDzString "," InsertDzString "," InsertDzInt ")" -> String {cons("String1209Syn")}
	"String2Bag" "(" InsertDzString ")" -> Bag {cons("Bag1392Syn")}
	"KLabel2String" "(" InsertDzKLabel ")" -> String {cons("String1207Syn")}
	KList "==KList" KList -> Bool {cons("Bool132Syn")}
	K "#inSet" Set -> Bool {cons("Bool1280Syn")}
	"#ENAMETOOLONG" -> TCPError {cons("TCPError1248Syn")}
	"replaceAll" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1208Syn")}
	"#binderSplit" "(" InsertDzK ")" -> K {cons("K1325Syn")}
	"#stdin" -> Int {cons("Int1383Syn")}
	K "inKList" KList -> Bool {cons("Bool1263Syn")}
	"rtrim" "(" InsertDzString ")" -> String {cons("String1225Syn")}
	"findString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int198Syn")}
	"isSymbolicMap" "(" InsertDzMap ")" -> K {cons("K1358Syn")}
	"$hasMapping" "(" InsertDzMap "," InsertDzK ")" -> Bool {cons("Bool1272Syn")}
	Bag	-> InsertDzBag
	Float	-> InsertDzFloat
	Bool	-> InsertDzBool
	KList	-> InsertDzKList
	Map	-> InsertDzMap
	TCPAnswer	-> InsertDzTCPAnswer
	K	-> InsertDzK
	MyBag	-> InsertDzMyBag
	AExp	-> InsertDzAExp
	BExp	-> InsertDzBExp
	String	-> InsertDzString
	Stmt	-> InsertDzStmt
	KLabel	-> InsertDzKLabel
	MyList	-> InsertDzMyList
	MySet	-> InsertDzMySet
	Id	-> InsertDzId
	MyMap	-> InsertDzMyMap
	Set	-> InsertDzSet
	Ids	-> InsertDzIds
	List	-> InsertDzList
	Int	-> InsertDzInt
	Block	-> InsertDzBlock


	VARID  ":Bool"        -> VariableDz            {cons("Bool12Var")}
	VARID  ":TCPError"        -> VariableDz            {cons("TCPError12Var")}
	VARID  ":#Float"        -> VariableDz            {cons("DzFloat12Var")}
	VARID  ":TCPAnswer"        -> VariableDz            {cons("TCPAnswer12Var")}
	VARID  ":#String"        -> VariableDz            {cons("DzString12Var")}
	VARID  ":#Int"        -> VariableDz            {cons("DzInt12Var")}
	VARID  ":BExp"        -> VariableDz            {cons("BExp12Var")}
	VARID  ":MySet"        -> VariableDz            {cons("MySet12Var")}
	VARID  ":MyMap"        -> VariableDz            {cons("MyMap12Var")}
	VARID  ":Ids"        -> VariableDz            {cons("Ids12Var")}
	VARID  ":Int"        -> VariableDz            {cons("Int12Var")}
	VARID  ":#Bool"        -> VariableDz            {cons("DzBool12Var")}
	VARID  ":Block"        -> VariableDz            {cons("Block12Var")}
	VARID  ":Float"        -> VariableDz            {cons("Float12Var")}
	VARID  ":Nat"        -> VariableDz            {cons("Nat12Var")}
	VARID  ":Variable"        -> VariableDz            {cons("Variable12Var")}
	VARID  ":AExps"        -> VariableDz            {cons("AExps12Var")}
	VARID  ":Char"        -> VariableDz            {cons("Char12Var")}
	VARID  ":MyBag"        -> VariableDz            {cons("MyBag12Var")}
	VARID  ":AExp"        -> VariableDz            {cons("AExp12Var")}
	VARID  ":String"        -> VariableDz            {cons("String12Var")}
	VARID  ":Stream"        -> VariableDz            {cons("Stream12Var")}
	VARID  ":Stmt"        -> VariableDz            {cons("Stmt12Var")}
	VARID  ":MyList"        -> VariableDz            {cons("MyList12Var")}
	VARID  ":Id"        -> VariableDz            {cons("Id12Var")}

	 K ":Bool"	-> VariableDz	{cons("Bool1Cast")}
	 K "::Bool"	-> VariableDz	{cons("Bool12Cast")}
	 K ":TCPError"	-> VariableDz	{cons("TCPError1Cast")}
	 K "::TCPError"	-> VariableDz	{cons("TCPError12Cast")}
	 K ":#Float"	-> VariableDz	{cons("DzFloat1Cast")}
	 K "::#Float"	-> VariableDz	{cons("DzFloat12Cast")}
	 K ":TCPAnswer"	-> VariableDz	{cons("TCPAnswer1Cast")}
	 K "::TCPAnswer"	-> VariableDz	{cons("TCPAnswer12Cast")}
	 K ":#String"	-> VariableDz	{cons("DzString1Cast")}
	 K "::#String"	-> VariableDz	{cons("DzString12Cast")}
	 K ":#Int"	-> VariableDz	{cons("DzInt1Cast")}
	 K "::#Int"	-> VariableDz	{cons("DzInt12Cast")}
	 K ":BExp"	-> VariableDz	{cons("BExp1Cast")}
	 K "::BExp"	-> VariableDz	{cons("BExp12Cast")}
	 K ":MySet"	-> VariableDz	{cons("MySet1Cast")}
	 K "::MySet"	-> VariableDz	{cons("MySet12Cast")}
	 K ":MyMap"	-> VariableDz	{cons("MyMap1Cast")}
	 K "::MyMap"	-> VariableDz	{cons("MyMap12Cast")}
	 K ":Ids"	-> VariableDz	{cons("Ids1Cast")}
	 K "::Ids"	-> VariableDz	{cons("Ids12Cast")}
	 K ":Int"	-> VariableDz	{cons("Int1Cast")}
	 K "::Int"	-> VariableDz	{cons("Int12Cast")}
	 K ":#Bool"	-> VariableDz	{cons("DzBool1Cast")}
	 K "::#Bool"	-> VariableDz	{cons("DzBool12Cast")}
	 K ":Block"	-> VariableDz	{cons("Block1Cast")}
	 K "::Block"	-> VariableDz	{cons("Block12Cast")}
	 K ":Float"	-> VariableDz	{cons("Float1Cast")}
	 K "::Float"	-> VariableDz	{cons("Float12Cast")}
	 K ":Nat"	-> VariableDz	{cons("Nat1Cast")}
	 K "::Nat"	-> VariableDz	{cons("Nat12Cast")}
	 K ":Variable"	-> VariableDz	{cons("Variable1Cast")}
	 K "::Variable"	-> VariableDz	{cons("Variable12Cast")}
	 K ":AExps"	-> VariableDz	{cons("AExps1Cast")}
	 K "::AExps"	-> VariableDz	{cons("AExps12Cast")}
	 K ":Char"	-> VariableDz	{cons("Char1Cast")}
	 K "::Char"	-> VariableDz	{cons("Char12Cast")}
	 K ":MyBag"	-> VariableDz	{cons("MyBag1Cast")}
	 K "::MyBag"	-> VariableDz	{cons("MyBag12Cast")}
	 K ":AExp"	-> VariableDz	{cons("AExp1Cast")}
	 K "::AExp"	-> VariableDz	{cons("AExp12Cast")}
	 K ":String"	-> VariableDz	{cons("String1Cast")}
	 K "::String"	-> VariableDz	{cons("String12Cast")}
	 K ":Stream"	-> VariableDz	{cons("Stream1Cast")}
	 K "::Stream"	-> VariableDz	{cons("Stream12Cast")}
	 K ":Stmt"	-> VariableDz	{cons("Stmt1Cast")}
	 K "::Stmt"	-> VariableDz	{cons("Stmt12Cast")}
	 K ":MyList"	-> VariableDz	{cons("MyList1Cast")}
	 K "::MyList"	-> VariableDz	{cons("MyList12Cast")}
	 K ":Id"	-> VariableDz	{cons("Id1Cast")}
	 K "::Id"	-> VariableDz	{cons("Id12Cast")}
	 K ":K"	-> VariableDz	{cons("K1Cast")}
	 K "::K"	-> VariableDz	{cons("K12Cast")}
	 K ":KItem"	-> VariableDz	{cons("KItem1Cast")}
	 K "::KItem"	-> VariableDz	{cons("KItem12Cast")}

	VariableDz -> K


	DzDzString		-> DzString	{cons("DzString1Const")}
	DzDzInt		-> DzInt	{cons("DzInt1Const")}
	DzDzId		-> DzId	{cons("DzId1Const")}
	DzKLabel		-> KLabel	{cons("KLabel1Const")}
	DzDzBool		-> DzBool	{cons("DzBool1Const")}
	DzDzFloat		-> DzFloat	{cons("DzFloat1Const")}

	DzDzINT		-> DzDzInt
	DzDzSTRING	-> DzDzString
	DzDzFLOAT	-> DzDzFloat

context-free restrictions
	VariableDz -/- [a-zA-Z0-9\{]
lexical syntax
	"isKResult" -> DzKLabel
	"heat" -> DzKLabel
	"redex" -> DzKLabel
	"#symEqualitySort" -> DzKLabel
	"true" -> DzDzBool
	"false" -> DzDzBool
	"heated" -> DzKLabel
	"'#andBool" -> DzKLabel
	"cool" -> DzKLabel
	"#token" -> DzKLabel
	"isBinder" -> DzKLabel
	"wrap-with" -> DzKLabel
	"#set" -> DzKLabel
	"isSet" -> DzKLabel


%% sort predicates
	"isBool"      -> DzKLabel
	"isSymbolicBool"      -> DzKLabel
	"#symBool"      -> DzKLabel
	"isTCPError"      -> DzKLabel
	"isSymbolicTCPError"      -> DzKLabel
	"#symTCPError"      -> DzKLabel
	"isKResult"      -> DzKLabel
	"isSymbolicKResult"      -> DzKLabel
	"#symKResult"      -> DzKLabel
	"is#Float"      -> DzKLabel
	"isSymbolicK"      -> DzKLabel
	"#symK"      -> DzKLabel
	"isTCPAnswer"      -> DzKLabel
	"isSymbolicTCPAnswer"      -> DzKLabel
	"#symTCPAnswer"      -> DzKLabel
	"is#String"      -> DzKLabel
	"is#Int"      -> DzKLabel
	"isBExp"      -> DzKLabel
	"isSymbolicBExp"      -> DzKLabel
	"#symBExp"      -> DzKLabel
	"isMySet"      -> DzKLabel
	"isSymbolicMySet"      -> DzKLabel
	"#symMySet"      -> DzKLabel
	"isMyMap"      -> DzKLabel
	"isSymbolicMyMap"      -> DzKLabel
	"#symMyMap"      -> DzKLabel
	"isIds"      -> DzKLabel
	"isSymbolicIds"      -> DzKLabel
	"#symIds"      -> DzKLabel
	"isInt"      -> DzKLabel
	"isSymbolicInt"      -> DzKLabel
	"#symInt"      -> DzKLabel
	"is#Bool"      -> DzKLabel
	"isBlock"      -> DzKLabel
	"isSymbolicBlock"      -> DzKLabel
	"#symBlock"      -> DzKLabel
	"isFloat"      -> DzKLabel
	"isSymbolicFloat"      -> DzKLabel
	"#symFloat"      -> DzKLabel
	"isNat"      -> DzKLabel
	"isSymbolicNat"      -> DzKLabel
	"#symNat"      -> DzKLabel
	"isVariable"      -> DzKLabel
	"isSymbolicVariable"      -> DzKLabel
	"#symVariable"      -> DzKLabel
	"isAExps"      -> DzKLabel
	"isSymbolicAExps"      -> DzKLabel
	"#symAExps"      -> DzKLabel
	"isChar"      -> DzKLabel
	"isSymbolicChar"      -> DzKLabel
	"#symChar"      -> DzKLabel
	"isMyBag"      -> DzKLabel
	"isSymbolicMyBag"      -> DzKLabel
	"#symMyBag"      -> DzKLabel
	"isAExp"      -> DzKLabel
	"isSymbolicAExp"      -> DzKLabel
	"#symAExp"      -> DzKLabel
	"isSymbolicKItem"      -> DzKLabel
	"#symKItem"      -> DzKLabel
	"isString"      -> DzKLabel
	"isSymbolicString"      -> DzKLabel
	"#symString"      -> DzKLabel
	"isStream"      -> DzKLabel
	"isSymbolicStream"      -> DzKLabel
	"#symStream"      -> DzKLabel
	"isStmt"      -> DzKLabel
	"isSymbolicStmt"      -> DzKLabel
	"#symStmt"      -> DzKLabel
	"isMyList"      -> DzKLabel
	"isSymbolicMyList"      -> DzKLabel
	"#symMyList"      -> DzKLabel
	"isId"      -> DzKLabel
	"isSymbolicId"      -> DzKLabel
	"#symId"      -> DzKLabel



%% terminals reject
	"String2Bag" -> VARID {reject}
	"String2KLabel" -> VARID {reject}
	"K2Sort" -> VARID {reject}
	"K2String" -> VARID {reject}
	"Float2Int" -> VARID {reject}
	"Bag2String" -> VARID {reject}
	"Vars2SMTLib" -> VARID {reject}
	"Set2KTerm" -> VARID {reject}
	"KList2KLabel" -> VARID {reject}
	"K2SMTLib" -> VARID {reject}
	"String2DotK" -> VARID {reject}
	"Consts2SMTLib" -> VARID {reject}
	"String2Int" -> VARID {reject}
	"Int2String" -> VARID {reject}
	"Map2KLabel" -> VARID {reject}
	"SMTLibQuery" -> VARID {reject}
	"String2Float" -> VARID {reject}
	"String2K" -> VARID {reject}
	"List2KLabel" -> VARID {reject}
	"String2Bool" -> VARID {reject}
	"String2Id" -> VARID {reject}
	"Float2String" -> VARID {reject}
	"KLabel2String" -> VARID {reject}
	"Bag2KLabel" -> VARID {reject}
	"SMTCall" -> VARID {reject}
	"MySetItem" -> VARID {reject}
	"MyBagItem" -> VARID {reject}
	"KLabel2KLabel" -> VARID {reject}
	"Set2KTermAcc" -> VARID {reject}
	"Id2String" -> VARID {reject}
	"Map" -> VARID {reject}
	"Int2Float" -> VARID {reject}
	"CellLabel2KLabel" -> VARID {reject}
	"MyMapOf" -> VARID {reject}
	"MyListItem" -> VARID {reject}
	"Set2KLabel" -> VARID {reject}

lexical restrictions
	%% follow restrictions
	"=" -/- [K].[L].[i].[s].[t]
	"-" -/- [I].[n].[t]
	"=K" -/- [L].[a].[b].[e].[l]
	"+" -/- [S].[t].[r].[i].[n].[g]
	"=" -/- [B].[a].[g]
	"#" -/- [E].[L].[O].[O].[P]
	">=" -/- [F].[l].[o].[a].[t]
	"#freeVars" -/- [S].[e].[t]
	"-" -/- [S].[e].[t]
	"#" -/- [E].[B].[A].[D].[F]
	"." -/- [M].[y].[S].[e].[t]
	"#" -/- [E].[A].[C].[C].[E].[S]
	"#stat" -/- [T].[y].[p].[e].[s]
	"#freshSymSort" -/- [N]
	"=" -/- [K]
	">" -/- [S].[t].[r].[i].[n].[g]
	"#token" -/- [T].[o].[S].[t].[r].[i].[n].[g]
	"=" -/- [M].[a].[p]
	"<=" -/- [F].[l].[o].[a].[t]
	"Set2KTerm" -/- [A].[c].[c]
	"<=" -/- [S].[e].[t]
	"#freshSym" -/- [S].[o].[r].[t].[N]
	"#parse" -/- [T].[o].[k].[e].[n]
	"and" -/- [T].[h].[e].[n].[B].[o].[o].[l]
	"=K" -/- [L].[i].[s].[t]
	">" -/- [I].[n].[t]
	"replace" -/- [F].[i].[r].[s].[t]
	"#eval" -/- [H].[e].[l].[p].[e].[r]
	"<=" -/- [I].[n].[t]
	"/" -/- [I].[n].[t]
	"<" -/- [F].[l].[o].[a].[t]
	"#" -/- [E].[I].[S].[D].[I].[R]
	"#getVars" -/- [F].[r].[o].[m].[K]
	"." -/- [M].[y].[M].[a].[p]
	"<" -/- [S].[t].[r].[i].[n].[g]
	"<" -/- [I].[n].[t]
	"#freeVars" -/- [B].[i].[n].[d].[e].[r].[\2]
	"#" -/- [E].[S].[P].[I].[P].[E]
	"#freshSym" -/- [S].[o].[r].[t]
	"#freeVars" -/- [B].[i].[n].[d].[e].[r].[\1]
	"*" -/- [I].[n].[t]
	"#" -/- [E].[N].[A].[M].[E].[T].[O].[O].[L].[O].[N].[G]
	"==K" -/- [L].[i].[s].[t]
	"#" -/- [E].[I].[N].[V].[A].[L]
	"=/=K" -/- [L].[a].[b].[e].[l]
	"=/=K" -/- [L].[i].[s].[t]
	"#" -/- [E].[O].[F]
	"#freshSym" -/- [N]
	"and" -/- [B].[o].[o].[l]
	"=" -/- [K].[L].[a].[b].[e].[l]
	"in" -/- [K].[L].[i].[s].[t]
	"/" -/- [F].[l].[o].[a].[t]
	"-" -/- [M].[y].[S].[e].[t]
	"#" -/- [E].[N].[O].[E].[N].[T]
	">=" -/- [I].[n].[t]
	"+" -/- [I].[n].[t]
	"%" -/- [I].[n].[t]
	"-" -/- [F].[l].[o].[a].[t]
	"." -/- [M].[y].[L].[i].[s].[t]
	"in" -/- [V].[a].[r].[s]
	"#parse" -/- [I].[n].[p].[u].[t]
	"=" -/- [I].[n].[t]
	">" -/- [F].[l].[o].[a].[t]
	"String2K" -/- [L].[a].[b].[e].[l]
	"+" -/- [F].[l].[o].[a].[t]
	"%" -/- [F].[l].[o].[a].[t]
	"#freeVars" -/- [B].[i].[n].[d].[e].[r]
	"=" -/- [L].[i].[s].[t]
	"." -/- [M].[y].[B].[a].[g]
	"<=" -/- [M].[a].[p]
	">=" -/- [S].[t].[r].[i].[n].[g]
	"#" -/- [E].[N].[O].[T].[D].[I].[R]
	"<=" -/- [S].[t].[r].[i].[n].[g]
	"replace" -/- [A].[l].[l]
	"==K" -/- [L].[a].[b].[e].[l]
	"*" -/- [F].[l].[o].[a].[t]
	"=" -/- [S].[e].[t]
lexical restrictions
%% some restrictions to ensure greedy matching for user defined constants
	DzDzInt -/- [0-9]
	"is" -/- [\#A-Z]

lexical syntax
context-free syntax


context-free restrictions
	"#" -/- [s].[y].[m]
